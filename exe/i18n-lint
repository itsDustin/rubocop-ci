#!/usr/bin/env ruby
# frozen_string_literal: true

require 'psych'
require 'yaml'

WrongKeyFormat = Struct.new(:key, :line, keyword_init: true) do
  def message
    "Key should use snake_case: \e[1m#{key}\e[0m"
  end
end

WrongKeyOrder = Struct.new(:key, :prev_key, :line, keyword_init: true) do
  def message
    "Keys not in alphabetical order, \e[1m#{key}\e[0m should be before \e[1m#{prev_key}\e[0m"
  end
end

class LocaleKeysLint < Psych::Handler
  attr_accessor :parser
  attr_reader :errors

  def initialize
    @errors = []
    @scopes = []
    @key_expected = false
    @nesting = []
    @last_key = nil

    super
  end

  def start_sequence(*_important_things)
    @scopes << :seq
    @key_expected = false
  end

  def end_sequence
    @scopes.pop
    @key_expected = true if @scopes.last == :map
  end

  def start_mapping(*_important_things)
    @scopes << :map
    @key_expected = true
    @nesting << @last_key if @last_key
    @last_key = nil
  end

  def end_mapping
    @scopes.pop
    @key_expected = true if @scopes.last == :map
    @last_key = @nesting.pop
  end

  def scalar(value, *_other_important_things)
    return unless @scopes.last == :map

    if @key_expected
      check_key_format(value)
      check_key_order(value)
      @last_key = value
    end

    @key_expected = !@key_expected
  end

  private

  def check_key_format(key)
    return if correct_key_format?(key)

    errors << WrongKeyFormat.new(key: key, line: parser.mark.line)
  end

  def check_key_order(key)
    return if correct_key_order?(key)

    errors << WrongKeyOrder.new(key: key, prev_key: @last_key, line: parser.mark.line)
  end

  def correct_key_format?(value)
    value =~ %r{\A[a-z0-9]+(?:[_/][a-z0-9]+)*\z}
  end

  def correct_key_order?(current_key)
    @last_key.nil? || @last_key < current_key
  end
end

def check_file(path)
  lint_handler = LocaleKeysLint.new
  parser = Psych::Parser.new lint_handler
  lint_handler.parser = parser
  File.open(path) { |f| parser.parse(f) }
  lint_handler.errors
end

def autocorrect_file(path)
  autocorrected_data = sort_texts_alphabetically(YAML.load_file(path)).to_yaml
  File.open(path, 'w') { |f| f.write(autocorrected_data) }
end

def sort_texts_alphabetically(data)
  case data
  when Hash then [data.sort].to_h.transform_values { |v| sort_texts_alphabetically(v) }
  when Array then data.map { |v| sort_texts_alphabetically(v) }
  else data
  end
end

autocorrect = !ARGV.delete('--fix').nil?
errors = {}

ARGV.each do |path|
  file_errors = check_file(path)

  if autocorrect && !file_errors.empty?
    autocorrect_file(path)
    file_errors = check_file(path)
  end

  errors[path] = file_errors unless file_errors.empty?
end

unless errors.empty?
  warn "\e[31mFollowing errors were found in the locale files\e[0m"
  errors.each do |path, file_errors|
    file_errors.each do |error|
      warn "\e[31m\u2717\e[0m #{error.message} at #{path}:#{error.line + 1}"
    end
  end

  exit(1)
end
